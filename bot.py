import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Update
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher.middlewares.base import BaseMiddleware

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_CHAT_ID = 579542680  # –í–∞—à chat_id
ALLOWED_USERS = [ADMIN_CHAT_ID]

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Middleware =====
class AccessMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Update, data):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        user_id = None
        
        if event.message:
            user_id = event.message.from_user.id
        elif event.callback_query:
            user_id = event.callback_query.from_user.id
        elif event.edited_message:
            user_id = event.edited_message.from_user.id
        elif event.channel_post:
            user_id = event.channel_post.from_user.id if event.channel_post.from_user else None
        elif event.edited_channel_post:
            user_id = event.edited_channel_post.from_user.id if event.edited_channel_post.from_user else None
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id –∏–ª–∏ –æ–Ω –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if not user_id or user_id not in ALLOWED_USERS:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if event.callback_query:
                await event.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            elif event.message:
                await event.message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return False
        
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.update.outer_middleware(AccessMiddleware())

# ===== –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏ ETH", callback_data="news_example")],
        [InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ ETH", callback_data="chart_example")],
        [InlineKeyboardButton(text="–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏", callback_data="liquidation_example")],
        [InlineKeyboardButton(text="Whale Alert", callback_data="whale_example")]
    ])
    await message.answer(
        "üöÄ <b>Ethereum Tracker Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )

# ===== –ü–†–ò–ú–ï–†–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö) ...

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logging.basicConfig(level=logging.INFO)
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π
        await bot.session.close()
        if hasattr(bot, '_session'):
            await bot._session.close()
        if hasattr(bot, '_client_session') and not bot._client_session.closed:
            await bot._client_session.close()

if __name__ == "__main__":
    asyncio.run(main())
