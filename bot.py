import os
import asyncio
import logging
import aiohttp
import re
import json
import sys
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramForbiddenError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from cachetools import TTLCache
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    API_TOKEN = os.environ['API_TOKEN']
    ADMIN_CHAT_ID = int(os.environ['ADMIN_CHAT_ID'])
    CHANNEL_ID = int(os.environ['CHANNEL_ID'])
except KeyError as e:
    logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    raise

# URL –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
LIQUIDATIONS_CHANNEL_URL = "https://t.me/s/BinanceLiquidations"
WHALE_ALERT_CHANNEL_URL = "https://t.me/s/whale_alert_io"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ aiogram
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
message_cache = TTLCache(maxsize=1000, ttl=3600)  # 1 —á–∞—Å

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
PREVIOUS_PRICE = None

# Middleware –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
class AccessMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user_id = None
        
        if event.message:
            user_id = event.message.from_user.id
        elif event.callback_query:
            user_id = event.callback_query.from_user.id
        
        if not user_id or user_id != ADMIN_CHAT_ID:
            return False
        
        return await handler(event, data)

dp.update.outer_middleware(AccessMiddleware())

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def fetch_crypto_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ ETH –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    sources = {
        "CoinDesk": "https://www.coindesk.com/tag/ethereum/feed",
        "The Block": "https://www.theblock.co/rss/ethereum",
        "CoinTelegraph": "https://cointelegraph.com/rss/tag/ethereum",
        "Decrypt": "https://decrypt.co/feed/ethereum",
        "CryptoSlate": "https://cryptoslate.com/categories/ethereum/feed/",
        "ETHHub": "https://ethhub.io/feed.xml"
    }
    
    news_items = []
    seen_titles = set()  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    async with aiohttp.ClientSession() as session:
        for source, url in sources.items():
            try:
                async with session.get(url, timeout=10) as response:
                    if response.status == 200:
                        xml = await response.text()
                        soup = BeautifulSoup(xml, 'xml')
                        
                        for item in soup.find_all('item')[:5]:
                            title = item.title.text.strip()
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                            if title in seen_titles:
                                continue
                            seen_titles.add(title)
                            
                            link = item.link.text
                            pub_date = item.pubDate.text if item.pubDate else ""
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                            try:
                                timestamp = datetime.strptime(pub_date, '%a, %d %b %Y %H:%M:%S %Z').replace(tzinfo=timezone.utc)
                            except:
                                timestamp = datetime.now(timezone.utc)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
                            importance = "‚ùóÔ∏è"
                            keywords = [
                                "hack", "exploit", "vulnerability", "critical", 
                                "emergency", "vitalik", "upgrade", "hard fork",
                                "security", "exploit", "bug", "attack"
                            ]
                            if any(kw in title.lower() for kw in keywords):
                                importance = "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                            source_emoji = {
                                "CoinDesk": "üì∞",
                                "The Block": "üîó",
                                "CoinTelegraph": "üì¢",
                                "Decrypt": "üîì",
                                "CryptoSlate": "üß©",
                                "ETHHub": "‚öôÔ∏è"
                            }
                            
                            news_items.append({
                                "source": f"{source_emoji.get(source, 'üìå')} {source}",
                                "title": f"{importance} {title}",
                                "link": link,
                                "pub_date": pub_date,
                                "timestamp": timestamp
                            })
            except Exception as e:
                logging.error(f"Error fetching news from {source}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ (—Å–≤–µ–∂–∏–µ –≤ –Ω–∞—á–∞–ª–µ)
    news_items.sort(key=lambda x: x['timestamp'], reverse=True)
    
    return news_items[:15]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 15 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

async def get_eth_price():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ETH"""
    url = "https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as response:
                data = await response.json()
                return float(data['price'])
        except Exception as e:
            logging.error(f"Error fetching ETH price: {e}")
            return None

async def get_candles(timeframe="1d"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
    interval_map = {
        "1h": "1h",
        "4h": "4h",
        "1d": "1d",
        "1w": "1w"
    }
    
    url = f"https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval={interval_map[timeframe]}&limit=2"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as response:
                data = await response.json()
                return data
        except Exception as e:
            logging.error(f"Error fetching candles: {e}")
            return None

def analyze_candle(candle):
    """–ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    open_price = float(candle[1])
    high = float(candle[2])
    low = float(candle[3])
    close = float(candle[4])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–≤–µ—á–∏
    candle_type = "üü¢" if close > open_price else "üî¥"
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Å–≤–µ—á–∏
    size = abs(close - open_price)
    body_size = size / open_price * 100
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if candle_type == "üü¢":
        if body_size > 3:
            scenario = "–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å. –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è."
        else:
            scenario = "–ù–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è."
    else:
        if body_size > 3:
            scenario = "–°–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        else:
            scenario = "–ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è. –¢—Ä–µ–Ω–¥ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Ä—É—à–µ–Ω."
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    support = round(low * 0.995, 2)
    resistance = round(high * 1.005, 2)
    
    return {
        "type": candle_type,
        "open": open_price,
        "high": high,
        "low": low,
        "close": close,
        "scenario": scenario,
        "support": support,
        "resistance": resistance
    }

async def get_altseason_indicator():
    """–†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞ —Å CoinGecko"""
    url = "https://api.coingecko.com/api/v3/global"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                data = await response.json()
                btc_dominance = data['data']['market_cap_percentage']['btc']
                eth_dominance = data['data']['market_cap_percentage']['eth']
                
                # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞
                altseason_score = 100 - btc_dominance
                
                if altseason_score < 30:
                    return f"üî¥ {altseason_score:.1f}% - –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC ({btc_dominance}%). –ê–ª—å—Ç—Å–µ–∑–æ–Ω –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω."
                elif altseason_score < 60:
                    return f"üü° {altseason_score:.1f}% - –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è —Ñ–∞–∑–∞. –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ETH: {eth_dominance}%"
                else:
                    return f"üü¢ {altseason_score:.1f}% - –ê–ª—å—Ç—Å–µ–∑–æ–Ω! –†–æ—Å—Ç –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –≤–µ—Ä–æ—è—Ç–µ–Ω."
    except Exception as e:
        logging.error(f"Error fetching altseason indicator: {e}")
        return "üî¥ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–ª—å—Ç—Å–µ–∑–æ–Ω–µ"

async def fetch_telegram_channel(url):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    messages = []
                    # –ò—â–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
                    for message_div in soup.find_all('div', class_='tgme_widget_message'):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
                        if message_div.find('a', class_='tgme_widget_message_ad_label'):
                            continue
                            
                        text_div = message_div.find('div', class_='tgme_widget_message_text')
                        if text_div:
                            message_text = text_div.get_text(strip=True)
                            message_link = message_div.find('a', class_='tgme_widget_message_date')['href']
                            message_time = message_div.find('time')['datetime']
                            
                            messages.append({
                                'text': message_text,
                                'link': message_link,
                                'time': message_time
                            })
                    
                    return messages
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {url}: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {url}: {e}")
        return []

# ===== –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò =====
async def publish_eth_news():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ ETH"""
    try:
        news = await fetch_crypto_news()
        for item in news:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cache_key = f"news_{item['link']}"
            if cache_key in message_cache:
                continue
                
            message_cache[cache_key] = True
            
            message = (
                f"{item['title']}\n\n"
                f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
                f"‚è∞ –î–∞—Ç–∞: {item['pub_date']}\n"
                f"<a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
            )
            await bot.send_message(CHANNEL_ID, message, disable_web_page_preview=True)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    except Exception as e:
        logging.error(f"Error publishing news: {e}")

async def send_candle_analysis(timeframe):
    """–ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º"""
    try:
        candles = await get_candles(timeframe)
        if not candles or len(candles) < 2:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
        candle_data = analyze_candle(candles[-2])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        timeframe_emoji = {
            "1h": "‚è±",
            "4h": "üïì",
            "1d": "üìÖ",
            "1w": "üóì"
        }
        
        message = (
            f"{timeframe_emoji.get(timeframe, 'üìä')} <b>–ê–Ω–∞–ª–∏–∑ {timeframe.upper()} —Å–≤–µ—á–∏ ETH/USDT</b>\n\n"
            f"{candle_data['type']} <b>–ó–∞–∫—Ä—ã—Ç–∏–µ:</b> ${candle_data['close']:.2f}\n"
            f"‚ñ´Ô∏è High: ${candle_data['high']:.2f}\n"
            f"‚ñ´Ô∏è Low: ${candle_data['low']:.2f}\n"
            f"‚ñ´Ô∏è Open: ${candle_data['open']:.2f}\n\n"
            f"üìä <b>–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:</b>\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${candle_data['support']:.2f}\n"
            f"–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${candle_data['resistance']:.2f}\n\n"
            f"üí° <b>–°—Ü–µ–Ω–∞—Ä–∏–π:</b>\n{candle_data['scenario']}"
        )
        
        await bot.send_message(CHANNEL_ID, message)
    except Exception as e:
        logging.error(f"Error sending candle analysis: {e}")

async def send_altseason_indicator():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞"""
    try:
        indicator = await get_altseason_indicator()
        message = (
            "üåê <b>–ò–ù–î–ò–ö–ê–¢–û–† –ê–õ–¨–¢–°–ï–ó–û–ù–ê</b>\n\n"
            f"{indicator}\n\n"
            "‚ÑπÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC —Å CoinGecko"
        )
        await bot.send_message(CHANNEL_ID, message)
    except Exception as e:
        logging.error(f"Error sending altseason indicator: {e}")

async def monitor_price_changes():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã"""
    global PREVIOUS_PRICE
    
    try:
        current_price = await get_eth_price()
        if not current_price:
            return
        
        if PREVIOUS_PRICE is None:
            PREVIOUS_PRICE = current_price
            return
            
        # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change = ((current_price - PREVIOUS_PRICE) / PREVIOUS_PRICE) * 100
        PREVIOUS_PRICE = current_price
        
        if abs(change) > 3:
            direction = "üìà" if change > 0 else "üìâ"
            message = (
                f"{direction * 3} <b>–†–ï–ó–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ ETH!</b> {direction * 3}\n\n"
                f"‚ñ´Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${current_price:,.2f}</b>\n"
                f"‚ñ´Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{change:.2f}%</b> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n\n"
                f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ä—ã–Ω–∫–∞"
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cache_key = f"price_{current_price:.2f}_{change:.2f}"
            if cache_key in message_cache:
                return
                
            message_cache[cache_key] = True
            await bot.send_message(CHANNEL_ID, message)
    except Exception as e:
        logging.error(f"Error monitoring price changes: {e}")

async def publish_liquidations():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö"""
    try:
        messages = await fetch_telegram_channel(LIQUIDATIONS_CHANNEL_URL)
        for msg in messages:
            if "Liquidated on #ETH" in msg['text']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                cache_key = f"liq_{msg['link']}"
                if cache_key in message_cache:
                    continue
                    
                message_cache[cache_key] = True
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    "üìâ <b>–õ–ò–ö–í–ò–î–ê–¶–ò–Ø ETH –ù–ê BINANCE!</b>\n\n"
                    f"{msg['text']}\n\n"
                    f"<a href='{msg['link']}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a> | {msg['time']}"
                )
                await bot.send_message(CHANNEL_ID, message, disable_web_page_preview=True)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {e}")

async def publish_whale_alerts():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è whale-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        messages = await fetch_telegram_channel(WHALE_ALERT_CHANNEL_URL)
        for msg in messages:
            if "#ETH" in msg['text'] and "USD" in msg['text']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                cache_key = f"whale_{msg['link']}"
                if cache_key in message_cache:
                    continue
                    
                message_cache[cache_key] = True
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    "üêã <b>WHALE ALERT!</b>\n\n"
                    f"{msg['text']}\n\n"
                    f"<a href='{msg['link']}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a> | {msg['time']}"
                )
                await bot.send_message(CHANNEL_ID, message, disable_web_page_preview=True)
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ whale alerts: {e}")

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê =====
def setup_scheduler():
    # –ù–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    scheduler.add_job(publish_eth_news, 'interval', hours=2)
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π
    scheduler.add_job(send_candle_analysis, 'cron', hour='*/1', args=["1h"])  # –ö–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(send_candle_analysis, 'cron', hour='*/4', args=["4h"])  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    scheduler.add_job(send_candle_analysis, 'cron', hour=0, minute=5, args=["1d"])  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:05 UTC
    scheduler.add_job(send_candle_analysis, 'cron', day_of_week='sun', hour=23, minute=55, args=["1w"])  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 23:55 UTC
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 11:00 UTC
    scheduler.add_job(send_altseason_indicator, 'cron', hour=11, minute=0)
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    scheduler.add_job(monitor_price_changes, 'interval', minutes=15)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    scheduler.add_job(publish_liquidations, 'interval', minutes=10)
    scheduler.add_job(publish_whale_alerts, 'interval', minutes=15)
    
    scheduler.start()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üöÄ <b>Ethereum Tracker Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç:\n"
        "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–± ETH\n"
        "üìà –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "üìâ –î–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö\n"
        "üêã –ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (Whale Alert)\n"
        "üåê –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞\n\n"
        "–í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    eth_price = await get_eth_price()
    jobs = scheduler.get_jobs()
    
    status = (
        f"üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"‚ñ´Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${eth_price:,.2f if eth_price else 'N/A'}\n"
        f"‚ñ´Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(jobs)}\n"
        f"‚ñ´Ô∏è –°–ª–µ–¥. –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {jobs[5].next_run_time if len(jobs) > 5 else 'N/A'}\n"
        f"‚ñ´Ô∏è –°–ª–µ–¥. whale alert: {jobs[6].next_run_time if len(jobs) > 6 else 'N/A'}"
    )
    
    await message.answer(status)

@dp.message(Command("ping_admin"))
async def cmd_ping_admin(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        await bot.send_chat_action(ADMIN_CHAT_ID, "typing")
        await message.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    except TelegramForbiddenError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# ===== HTTP SERVER FOR HEALTH CHECKS =====
async def health_handler(request):
    return web.Response(text="Bot is running")

async def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    app = web.Application()
    app.router.add_get('/health', health_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"HTTP server started on port {port}")

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê =====
async def on_startup():
    logging.info("Starting scheduler...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_envs = ['API_TOKEN', 'ADMIN_CHAT_ID', 'CHANNEL_ID']
    missing = [var for var in required_envs if not os.getenv(var)]
    
    if missing:
        error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}"
        logging.critical(error_msg)
        exit(1)
    
    setup_scheduler()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        me = await bot.get_me()
        logging.info(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–†–û–í–ï–†–ö–ê: –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?
        await bot.send_chat_action(ADMIN_CHAT_ID, "typing")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMIN_CHAT_ID} –¥–æ—Å—Ç—É–ø–µ–Ω")
    except TelegramForbiddenError:
        logging.warning(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}. "
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def on_shutdown():
    logging.info("Stopping scheduler...")
    scheduler.shutdown()
    try:
        await bot.send_message(ADMIN_CHAT_ID, "üî¥ Ethereum Tracker Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except TelegramForbiddenError:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    await start_http_server()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    await on_startup()
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
