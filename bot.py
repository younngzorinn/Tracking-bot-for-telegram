import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties  # –í–∞–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç!

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = 123456789  # –í–∞—à chat_id –¥–ª—è —Ç–µ—Å—Ç–æ–≤
ALLOWED_USERS = [ADMIN_CHAT_ID]  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ===== Middleware –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ =====
async def check_user_access(handler, event, data):
    if event.from_user.id not in ALLOWED_USERS:
        await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return False
    return await handler(event, data)

dp.update.middleware(check_user_access)

# ===== –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏ ETH", callback_data="news_example")],
        [InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ ETH", callback_data="chart_example")],
        [InlineKeyboardButton(text="–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏", callback_data="liquidation_example")],
        [InlineKeyboardButton(text="Whale Alert", callback_data="whale_example")]
    ])
    await message.answer(
        "üöÄ <b>Ethereum Tracker Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )

# ===== –ü–†–ò–ú–ï–†–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
@dp.callback_query(lambda c: c.data == "news_example")
async def news_example(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–°–†–û–ß–ù–´–ï –ù–û–í–û–°–¢–ò ETH</b> ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n"
        "üî• Vitalik Buterin –ø—Ä–µ–¥–ª–æ–∂–∏–ª –º–∞—Å—à—Ç–∞–±–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏\n"
        "üìç –ò—Å—Ç–æ—á–Ω–∏–∫: CoinDesk\n"
        "<a href='https://example.com'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>",
        disable_web_page_preview=True
    )

@dp.callback_query(lambda c: c.data == "chart_example")
async def chart_example(callback: types.CallbackQuery):
    # –î–ª—è —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å parse_mode=None
    await callback.message.answer_photo(
        photo="https://s3.coinmarketcap.com/generated/sparklines/web/7d/2781/1027.svg",
        caption="üìä <b>–ê–Ω–∞–ª–∏–∑ 4H —Å–≤–µ—á–∏ ETH/USDT</b>\n\n"
                "‚ñ´Ô∏è <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> $3785.42 (+2.3%)\n"
                "‚ñ´Ô∏è <b>–ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏:</b>\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: $3750 | $3680\n"
                "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $3820 | $3900\n\n"
                "üü¢ –°—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–æ–±–∏—Ç–∏–µ $3820 –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å –∫ $4000",
        parse_mode=None  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ñ–æ—Ç–æ
    )

@dp.callback_query(lambda c: c.data == "liquidation_example")
async def liquidation_example(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìâ <b>–ö–†–£–ü–ù–ê–Ø –õ–ò–ö–í–ò–î–ê–¶–ò–Ø ETH!</b>\n\n"
        "‚ñ´Ô∏è –ë–∏—Ä–∂–∞: <b>Binance</b>\n"
        "‚ñ´Ô∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>LONG</b> ‚ñ´Ô∏è –°—É–º–º–∞: <b>$2.1M</b>\n"
        "‚ñ´Ô∏è –¶–µ–Ω–∞: $3776.40\n"
        "‚ñ´Ô∏è –í—Ä–µ–º—è: 12:45 UTC\n\n"
        "#ETH #Liquidation"
    )

@dp.callback_query(lambda c: c.data == "whale_example")
async def whale_example(callback: types.CallbackQuery):
    await callback.message.answer(
        "üêã <b>WHALE ALERT!</b> üö®\n\n"
        "‚ñ´Ô∏è –°—É–º–º–∞: <b>24,500 ETH</b> ($92.4M)\n"
        "‚ñ´Ô∏è –û—Ç: Binance\n"
        "‚ñ´Ô∏è –ö: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n"
        "‚ñ´Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <a href='https://etherscan.io/tx/0x...'>Etherscan</a>\n\n"
        "üìç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –ö–ò–¢–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø"
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logging.basicConfig(level=logging.INFO)
    try:
        await dp.start_polling(bot, skip_updates=True)  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã
    except Exception as e:
        logging.error(f"Fatal error: {e}")
    finally:
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            await bot.session.close()
            if hasattr(bot, '_session'):
                await bot._session.close()
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è aiohttp
            if hasattr(bot, '_client_session') and not bot._client_session.closed:
                await bot._client_session.close()
        except Exception as e:
            logging.error(f"Session close error: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
